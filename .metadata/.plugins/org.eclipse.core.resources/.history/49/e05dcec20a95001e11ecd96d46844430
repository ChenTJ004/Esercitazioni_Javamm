//boolean anelloBilanciato(int[][] T, int k) {
//	int m = T.length;
//	int centro = m / 2;
//	int somma = T[centro - k][centro - k] + T[centro + k][centro + k];
//	int somma2;
//		// sopra e sotto
//		for (int i = 0; i < (k * 2 + 1); i++) {
//			somma2 = T[centro - k][centro + (i - k)] + T[centro + k][centro + k - i];
//			if (somma != somma2) {
//				return false;
//			}
//		}
//
//		// lati
//		for (int i = 1; i < (k * 2); i++) {
//			somma2 = T[centro + (i - k)][centro - k] + T[centro + k - i][centro + k];
//			if (somma != somma2) {
//				return false;
//			}
//		}
//	return true;
//}
boolean anelloBilanciato(int[][] T, int k) {
	int m = T.length;
	int centro = m / 2;
	int somma = T[centro - k][centro - k]+T[centro + k][centro + k])
;
// sopra e sotto
if (T[centro - k][centro - k] != T[centro + k][centro + k]) {
	return false;
}
for (int i = 1; i < m; i++) {
	int r1 = centro - k;
	int c1 = centro - k + i;
	int r2 = centro + k;
	int c2 = centro + k - i;
	if (T[r1][c1] != T[r2][c2]) {
		return false;
	}
	r1 = centro - k - i;
	c1 = centro - k;
	r2 = centro + k + i;
	c2 = centro + k;
	if (T[r1][c1] != T[r2][c2]) {
		return false;
	}
}
return true;
}

int[][] T = 	{{7,2, 5, 6, 0},
			     {10,2,3,-5,1},
			     {-1,-1,3,4,4},
			     {2,8,0,1,-7},
			     {3,-3,-2,1,-4} };
int k = 2;
		
System.out.println(anelloBilanciato(T, k));