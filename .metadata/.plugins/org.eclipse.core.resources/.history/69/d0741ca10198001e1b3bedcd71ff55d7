int[][] azzeraNonUnici(int[][] M, int r, int c) {
	int m = M.length;
	int n = M[0].length;
	int elemento = M[r][c];
	int i = 1;
	boolean nonUnico = false;
	while (c + i < n) {
		if (elemento == M[r][c + i]) {
			M[r][c + i] = 0;
			nonUnico = true;
		}
		i++;
	}

	i = 1;
	while (r + i < m) {
		if (elemento == M[r + i][c]) {
			M[r + i][c] = 0;
			nonUnico = true;
		}
		i++;
	}

	i = 1;
	while (r + i < m && c + i < n) {
		if (elemento == M[r + i][c + i]) {
			M[r + i][c + i] = 0;
			nonUnico = true;
		}
		i++;
	}

	if (nonUnico) {
		M[r][c] = 0;
	}

	return M;
}

int[][] azzeraNonUniciMatrice(int[][] M, int i, int j) {
	int m = M.length;
	int n = M[0].length;
	int i = 0;
	int j = 0;
	if(i<m){
		azzeraNonUnici(M, i, j);
	}

	return null;
}

int[][] azzeraNonUniciMatrice(int[][] M) {
	int m = M.length;
	int n = M[0].length;
	int i = 0;
	int j = 0;
	if(i<m){
		azzeraNonUnici(M, i, j);
	}

	return null;
}

int[][] M = new int[][] {{2, 2, 3, 1}, {1, 2, 3, 4}, {1, 2, 2, 4}, {1, 3, 3, 2}};

int r = 1, c = 1;

System.out.println(azzeraNonUnici(M, r, c));
